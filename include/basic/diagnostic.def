#if !defined(DIAG)
#define DIAG(id, message)
#endif
DIAG(err_sym_declared, "symbol {0} already declared")
DIAG(err_expected, "expected `{0}', but got `{1}'")
DIAG(err_base_type_expected, "base type must be a type")
DIAG(err_base_type_must_be_record, "base type must be a RECORD type")
DIAG(err_bar_in_case_expected, "| (or END) in CASE statement expected")
DIAG(err_const_experssion_expected, "constant expression expected")
DIAG(err_const_label_expected, "constant label expected")
DIAG(err_factor_expected, "Factor expression expected")
DIAG(err_variable_expected, "Variable expression expected")
DIAG(err_import_already_used, "MODULE IMPORT {0} is already used")
DIAG(
	err_module_names_dont_match, "MODULE names {0} and {1} do not match"
)
DIAG(
	err_procedure_names_dont_match, "PROCEDURE names {0} and {1} do not match"
)
DIAG(err_length_must_be_nonnegative, "length must be non-negative")
DIAG(err_must_point_to_record, "can only point to RECORD types")
DIAG(err_identfier_expected, "identifier expected")
DIAG(err_module_identifier_expected, "MODULE identifier expected")
DIAG(
	err_period_after_module_expected, ". after MODULE identifier expected"
)
DIAG(
	err_negate_must_be_numeric, "only numeric expressions can be negated"
)
DIAG(err_wrong_operator_for_int, "wrong operator for INTEGER operands")
DIAG(err_wrong_operator_for_real, "wrong operator for REAL operands")
DIAG(err_wrong_operator_for_bool, "wrong operator for BOOLEAN operands")
DIAG(err_wrong_operator_for_const, "wrong operator for CONST operands")
DIAG(err_wrong_operator_for_set, "wrong operator for SET operands")
DIAG(err_identifier_must_be_type, "identifier must be a type")
DIAG(err_type_expected, "type expected")
DIAG(err_int_expected, "INTEGER value expected")
DIAG(err_array_expected, "ARRAY type expected")
DIAG(err_pointer_expected, "POINTER type expected")
DIAG(err_record_expected, "RECORD type expected")
DIAG(err_unknown_record_entry, "unknown RECORD entry")
DIAG(err_already_defined, "identifier {0} is already defined")
DIAG(err_divide_by_0, "divide by zero")
DIAG(err_module_not_found, "module `{0}' not found")
DIAG(err_procedure_expected, "procedure expected")
#undef DIAG